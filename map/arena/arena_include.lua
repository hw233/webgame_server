E_SUCCESS								= 0			--成功E_ARENA_PLAYER_OFFLINE 					= 27101		--玩家离线E_ARENA_PLAYER_ALREADY_ADD 				= 27102		--玩家已经加入了房间E_ARENA_PLAYER_ON_TEAM 					= 27103		--玩家已经加入了队伍E_ARENA_NO_PLAYER						= 27104		--房间没有该玩家E_ARENA_ARENA_ALREADY_REGISTER			= 27105		--竞技场重复注册E_ARENA_ARENA_INVALID_PASSWORD			= 27106		--无效密码E_ARENA_ROOM_INVALID_MEMBER				= 27107		--无效的房间成员E_ARENA_ARENA_INVALID_ROOM				= 27108		--无效的房间E_ARENA_ARENA_INVALID_NAME				= 27109		--无效的房间名E_ARENA_ROOM_IS_FULL					= 27110		--房间已经满员E_ARENA_ARENA_INVALID_TYPE				= 27111		--无效的房间类型E_ARENA_ARENA_INVALID_ID				= 27112		--无效的竞技场IDE_ARENA_ARENA_CLOSE						= 27113		--竞技场未开放E_ARENA_PLAYER_NO_ROOM					= 27114		--玩家未加入任何房间E_ARENA_PLAYER_NO_ACCESS				= 27115		--玩家无权限E_ARENA_NO_TYPE_ROOM					= 27116		--无该类型的房间E_ARENA_INVALID_PARAM					= 27117		--无效的参数E_ARENA_NOT_COMPATIBLE_ROOM				= 27118		--无适合的房间E_ARENA_NOT_ALL_READY					= 27119		--其他玩家尚未进行准备E_ARENA_ROOM_IS_LOCK					= 27120		--房间已经锁定E_ARENA_PLAYER_LEVEL					= 27121		--玩家等级不够ARENA_STATUS = {	ARENA_OPEN = 0	, ARENA_CLOSE = 1}ARENA_MODE = {	MODE_FREEDOM = 0	, MODE_1V1 = 1	, MODE_2V2 = 2	, MODE_3V3 = 3}ROOM_ACCESS = {	ACCESS_PUBLIC = 0	, ACCESS_PROTECTED = 1}ROOM_STATUS = {	ROOM_FINE = 0	, ROOM_LOCK = 1	, ROOM_CLOSE = 2	, ROOM_WAR = 3}ROOM_TYPE = {	TYPE_MIN = 0	, TYPE_1V1 = 1	, TYPE_2V2 = 2	, TYPE_3V3 = 3	, TYPE_MAX = 4}require("config.arena_config")require("arena.arena_room")require("arena.arena")require("arena.arena_mgr")--local g_arena_mgr = Arena_mgr()function f_get_arena_mgr()	return g_arena_mgrend-----------------------------------------------------------竞技场-------------------------------------------------------------以下只实现了功能,并未进行性能优化,如果有必可以考虑local function check_param_helper(char_id, cmd, ...)	for i = 1, arg.n do		if not arg[i] then			local result_pkt = {}			result_pkt.result = E_ARENA_INVALID_PARAM			g_cltsock_mgr:send_client(char_id, cmd, result_pkt)			return false		end	end	return trueend--获取房间列表Clt_commands[1][CMD_MAP_ARENA_GET_ROOMS_C] =function(conn, pkt)	if not pkt or not conn.char_id then		return	end		local mode = 0	local error, arena_obj = f_get_arena_mgr():get_active_arena(mode)	local result_pkt = {}	result_pkt.result = error	if E_SUCCESS == error then		result_pkt.list = arena_obj:serialize_to_net()	end	g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_GET_ROOMS_S, result_pkt)end--获取房间信息Clt_commands[1][CMD_MAP_ARENA_GET_ROOM_INFO_C] =function(conn, pkt)	if not pkt or not conn.char_id then		return	end	local mode = 0	local error, arena_obj = f_get_arena_mgr():get_active_arena(mode)	local result_pkt = {}	if E_SUCCESS == error then		local room_id = nil		error, room_id = arena_obj:get_char_room(conn.char_id)		if E_SUCCESS == error then			error, result_pkt = arena_obj:serialize_room(room_id)		end	end	result_pkt.result = error	g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_GET_ROOM_INFO_S, result_pkt)end--开房Clt_commands[1][CMD_MAP_ARENA_OPEN_ROOM_C] =function(conn, pkt)	if not pkt or not conn.char_id then		return	end	if not pkt.access or not pkt.type then		local result_pkt = {}		result_pkt.result = E_ARENA_INVALID_PARAM		g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_OPEN_ROOM_S, result_pkt)		return	end	local mode = 0	local error, arena_obj = f_get_arena_mgr():get_active_arena(mode)	local result_pkt = {}		if E_SUCCESS == error then		error, result_pkt.room_id = arena_obj:build_room(conn.char_id, pkt.room_name, pkt.type, pkt.access, pkt.password)	end	result_pkt.result = error	g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_OPEN_ROOM_S, result_pkt)end--搜索并进入房间Clt_commands[1][CMD_MAP_ARENA_FIND_ROOM_C] =function(conn, pkt)	if not pkt or not conn.char_id then		return	end	if not pkt.room_id then		local result_pkt = {}		result_pkt.result = E_ARENA_INVALID_PARAM		g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_FIND_ROOM_S, result_pkt)		return	end	local mode = 0	local error, arena_obj = f_get_arena_mgr():get_active_arena(mode)	local result_pkt = {}	if E_SUCCESS == error then		error = arena_obj:add_to_room(pkt.room_id, conn.char_id, pkt.password)		if E_SUCCESS == error then			result_pkt.room_id = pkt.room_id		end	end	result_pkt.result = error	g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_FIND_ROOM_S, result_pkt)end--进入房间Clt_commands[1][CMD_MAP_ARENA_ADD_TO_ROOM_C] =function(conn, pkt)	if not pkt or not conn.char_id then		return	end	if not pkt.room_id then		local result_pkt = {}		result_pkt.result = E_ARENA_INVALID_PARAM		g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_ADD_TO_ROOM_S, result_pkt)		return	end	local mode = 0	local error, arena_obj = f_get_arena_mgr():get_active_arena(mode)	local result_pkt = {}	if E_SUCCESS == error then		error = arena_obj:add_to_room(pkt.room_id, conn.char_id, pkt.password)		if E_SUCCESS == error then			result_pkt.room_id = pkt.room_id		end	end	result_pkt.result = error	g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_ADD_TO_ROOM_S, result_pkt)end--踢出玩家Clt_commands[1][CMD_MAP_ARENA_REMOVE_MEMBER_C] =function(conn, pkt)	if not pkt or not conn.char_id then		return	end	if not pkt.char_id then		local result_pkt = {}		result_pkt.result = E_ARENA_INVALID_PARAM		g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_REMOVE_MEMBER_S, result_pkt)		return	end		local mode = 0	local error, arena_obj = f_get_arena_mgr():get_active_arena(mode)	local result_pkt = {}		local room_id = nil	if E_SUCCESS == error then		error, room_id = arena_obj:kickout_player_from_room(conn.char_id, pkt.char_id)	end	result_pkt.result = error	g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_REMOVE_MEMBER_S, result_pkt)end--玩家退出房间Clt_commands[1][CMD_MAP_ARENA_LEAVE_ROOM_C] =function(conn, pkt)	if not pkt or not conn.char_id then		return	end	local mode = 0	local error, arena_obj = f_get_arena_mgr():get_active_arena(mode)	local result_pkt = {}		local room_id = nil	if E_SUCCESS == error then		error, room_id = arena_obj:remove_player_from_room(conn.char_id)	end	result_pkt.result = error	g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_LEAVE_ROOM_S, result_pkt)end --玩家进行准备Clt_commands[1][CMD_MAP_ARENA_TO_READY_C] =function(conn, pkt)	if not pkt or not conn.char_id then		return	end	local mode = 0	local error, arena_obj = f_get_arena_mgr():get_active_arena(mode)	local result_pkt = {}		if E_SUCCESS == error then		error = arena_obj:set_ready(conn.char_id, true)	end	result_pkt.result = error	g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_TO_READY_S, result_pkt)end--玩家退出准备Clt_commands[1][CMD_MAP_ARENA_TO_FREE_C] =function(conn, pkt)	if not pkt or not conn.char_id then		return	end	local mode = 0	local error, arena_obj = f_get_arena_mgr():get_active_arena(mode)	local result_pkt = {}		if E_SUCCESS == error then		error = arena_obj:set_ready(conn.char_id, nil)	end	result_pkt.result = error	g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_TO_FREE_S, result_pkt)end--玩家快速加入Clt_commands[1][CMD_MAP_ARENA_FAST_ADD_TO_ROOM_C] =function(conn, pkt)	if not pkt or not conn.char_id then		return	end	if not pkt.type then		local result_pkt = {}		result_pkt.result = E_ARENA_INVALID_PARAM		g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_FAST_ADD_TO_ROOM_S, result_pkt)		return	end	local mode = 0	local error, arena_obj = f_get_arena_mgr():get_active_arena(mode)	local result_pkt = {}		local room_id = nil	if E_SUCCESS == error then		error, room_id = arena_obj:fast_add_to_room(conn.char_id, pkt.type)	end	result_pkt.result = error	result_pkt.room_id = room_id	g_cltsock_mgr:send_client(conn.char_id, CMD_MAP_ARENA_FAST_ADD_TO_ROOM_S, result_pkt)end-----------------------------------------------------------------------------------------------------------------------------------